@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<li class="@("blazored-sub-menu-header"+CssString)" id="@MenuItem.Link">
	<div role="button" tabindex="0" @onclick="OnClick">
		<NavLink href="@MenuItem.Link" Match="@MenuItem.Match">@MenuItem.Title</NavLink>
	</div>

	<ul class="blazored-sub-menu blazored-menu-level-@(MenuLevel)">
		@foreach (var item in MenuItem.MenuItems){
			@if (item.MenuItems != null){
				<BlazoredSubMenu MenuItem="@item" MenuLevel="@(MenuLevel+1)" />
			}else{
				<BlazoredMenuItem MenuItem="@item" />
			}
		}
	</ul>
</li>

@code {
	[Parameter]
	public MenuItem MenuItem { get; set; }
	[Parameter]
	public int MenuLevel { get; set; }

	protected string Icon { get; set; }
	protected bool IsOpen { get; set; }
	public NavLinkMatch Match { get; set; }
	protected string CssString {
		get {
			return IsOpen ? " open" : "";
		}
	}
	protected void ToggleSubMenu() {
		IsOpen = !IsOpen;
		StateHasChanged();
	}
	protected override void OnInitialized() {
	}
	protected override void OnAfterRender(bool firstRender) {
		if(firstRender)
			OnClick(); //the page is just loading, so simulate a click
	}
	protected void OnClick() {
		string path = NavigationManager.Uri;

		if (string.IsNullOrEmpty(MenuItem.Link))
			return;

		//ToggleSubMenu();

		if (!string.IsNullOrEmpty(MenuItem.MatchLink))
			Match = (MenuItem.MatchLink.Equals("All") ? NavLinkMatch.All : NavLinkMatch.Prefix);

		//Debug.WriteLine(path + "---" + MenuItem.Link);

		if (path.Contains(MenuItem.Link))
			toggle(MenuItem.Link);
	}
	private async void toggle(string selected) {
		//Debug.WriteLine("Selected:" + selected);
		await JSRuntime.InvokeAsync<string>("toggleSubMenu", selected);
		StateHasChanged();
	}
}