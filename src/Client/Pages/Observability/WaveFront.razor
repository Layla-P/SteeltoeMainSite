@page "/observability/wavefront"

	<Breadcrumbs NavName="Wavefront"
							 ParentLinkName="Observability"
							 ParentLinkUrl="/observability"
							 ShowGetStarted=false />
<Tutorial>
	<Title>Using Wavefront for app container metrics, distributed tracing, and observability</Title>
	<Description>This tutorial takes you creating a simple Steeltoe app with actuators, logging, and distributed tracing. With that app running you then export the data to a Wavefront account.</Description>
	<TutorialSteps>
		<div class="row">
			<div class="col-12 getting-started-header bold">Prereq's</div>
		</div>
		<div class="row">
			<div class="col-12">
				You'll need a Wavefront account to complete this guide successfully. <NavLink class="nav-link" href="https://www.wavefront.com/sign-up/" target="_blank">Create a 30 day trial</NavLink>, if you don't already have access. With your account established replace <code>YOUR_API_TOKEN</code> below with your account token. Lean how to retrieve that token <NavLink class="nav-link" href="https://docs.wavefront.com/users_account_managing.html" target="_blank">here</NavLink>.
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header bold">First, <b>start a Wave Front proxy instance</b>. Depending on your hosting platform this is done in several ways.</div>
		</div>
		<div class="row">
			<div class="col-12">
				<TabSet>
					<Tab Title="Local">
            <ol>
              <li>Create a docker network for all the containers to run within
                <code class="inline">docker network create "steeltoe"</code>
              </li>
              <li>
						Using the <NavLink class="nav-link" href="https://hub.docker.com/r/wavefronthq/proxy" target="_blank">docker image</NavLink>, start a local instance of @ServiceName. Remember to replace &lt;YOUR_API_TOKEN&gt; with your account's token.
						<code class="multiline">docker run -d `
  --name "wavefront-proxy" `
  -n "steeltoe" `
  -e WAVEFRONT_URL=https://longboard.wavefront.com/api/ `
  -e WAVEFRONT_TOKEN=&lt;YOUR_API_TOKEN&gt; `
  -e JAVA_HEAP_USAGE=512m `
  -p 2878:2878 `
  -p 9411:9411 `
  -e WAVEFRONT_PROXY_ARGS="--traceZipkinListenerPorts 9411" `
  wavefronthq/proxy:latest</code>
              </li>
            </ol>
					</Tab>
					<Tab Title="Kubernetes">
						Using the <NavLink class="nav-link" href="https://github.com/wavefrontHQ/helm/tree/master/wavefront" target="_blank">helm chart</NavLink>, start an instance of @ServiceName. Remember to replace &lt;YOUR_API_TOKEN&gt; with your account's token and CLUSTER information with your K8's cluster info.
						<pre><code>PS C:\> helm install `
  wavefront/wavefront `
  --name "wavefront-proxy" `
  --namespace wavefront `
  --set clusterName=&lt;K8s-CLUSTER-NAME&gt; `
  --set wavefront.url=https://&lt;YOUR_CLUSTER&gt;.wavefront.com `
  --set wavefront.token=&lt;YOUR_API_TOKEN&gt; `
  --set proxy.zipkinPort=9411</code></pre>
					</Tab>
				</TabSet>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Then <b>create a .NET Core WebAPI</b> with the correct Steeltoe dependencies</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="actuators.png" DependencyName="Actuators, DynamicLogging" ProjectName="@ProjectName" />
					</li>
					<li>Extract the zipped project and open in your IDE of choice (we use Visual Studio)</li>
					<li>
						Add the other needed actuators in <b>startup.cs</b>
<pre><code>using Steeltoe.Management.Endpoint.Metrics;
using Steeltoe.Management.Tracing;
using Steeltoe.Management.Exporter.Tracing;

...

public class Startup
{
  public Startup(IConfiguration configuration)
  {
		Configuration = configuration;
  }

  public IConfiguration Configuration { get; }

  // This method gets called by the runtime. Use this method to add services to the container.
  public void ConfigureServices(IServiceCollection services)
  {
    services.AddPrometheusActuator(Configuration);
    services.AddMetricsActuator(Configuration);
    services.AddDistributedTracing(Configuration);
    services.AddZipkinExporter(Configuration);
    services.AddControllers();
  }
 
  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
  {
    if (env.IsDevelopment())
    {
			app.UseDeveloperExceptionPage();
    }
		app.UsePrometheusActuator();
		app.UseMetricsActuator();
		app.UseTracingExporter();
		app.UseRouting();
    app.UseEndpoints(endpoints =>
    {
			endpoints.MapControllers();
    });
  }
}</code></pre>
					</li>
					<li>
						Set the actuator path, exposure, and zipkin server address in <b>appsettings.json</b>
						<TabSet>
							<Tab Title="Local">
								<pre><code>{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  },
  "spring": {
    "application": {
      "name": "Wavefront_demo_app"
    }
  },
  "management": {
    "endpoints": {
      "actuator": {
        "exposure": {
          "include": [ "*" ]
        }
      },
      "path": "/",
      "cloudfoundry": {
        "validateCertificates": false
      }
    },
    "metrics": {
      "exporter": {
        "cloudfoundry": {
          "validateCertificates": false
        }
      }
    },
    "tracing": {
      "alwaysSample": true,
      "useShortTraceIds ": true,
      "exporter": {
        "zipkin": {
          "endpoint": "http://localhost:9411/api/v2/spans",
          "validateCertificates": false
        }
      }
    }
  }
}</code></pre>
							</Tab>
							<Tab Title="Kubernetes">
								<pre><code>{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  },
  "spring": {
    "application": {
      "name": "Wavefront_demo_app"
    }
  },
  "management": {
    "endpoints": {
      "actuator": {
        "exposure": {
          "include": [ "*" ]
        }
      },
      "path": "/",
      "cloudfoundry": {
        "validateCertificates": false
      }
    },
    "metrics": {
      "exporter": {
        "cloudfoundry": {
          "validateCertificates": false
        }
      }
    },
    "tracing": {
      "alwaysSample": true,
      "useShortTraceIds ": true,
      "exporter": {
        "zipkin": {
          "endpoint": "http://&lt;HELM_PROVIDED_HOST_ADDRESS&gt;:9411/api/v2/spans",
          "validateCertificates": false
        }
      }
    }
  }
}</code></pre>
							</Tab>
						</TabSet>
					</li>
				</ol>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">Now <b>deploy the app</b> as a container</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <TabSet>
				  <Steeltoe.Client.Components.RunAppTab.Docker ProjectName="@ProjectName" ImageName="steeltoe-actuator-app" ContainerName="steeltoe-actuator-app" />
				  <Steeltoe.Client.Components.RunAppTab.Kubernetes ProjectName="@ProjectName" IncludeNavigateToApp="false" />
			  </TabSet>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header bold">Next <b>start the Telegraf service</b> with the correct configuration</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
          <TabSet>
							<Tab Title="Local">
                <ol>
                  <li>Create a Telegraf configuration file <b>telegraf.conf</b> in the same folder as @(ProjectName).csproj
                    <pre><code># Telegraf Configuration
  # # Configuration for Wavefront server to send metrics to
  [[outputs.wavefront]]
	  url = "http://wavefront-proxy:2878"
	  prefix = "my.steeltoe.app."

  # # Read metrics from one or many prometheus clients
  [[inputs.prometheus]]
	  urls = ["http://steeltoe-actuator-app:8080/actuators/prometheus"]
	  metric_version = 2</code></pre>
                  </li>
                  <li>Using the previously created docker network, start the container.
                    <code class="inline">docker run -d -n "steeltoe" -v &lt;PATH_TO&gt;/telegraf.conf:/etc/telegraf/telegraf.conf:ro telegraf</code>
                  </li>
                </ol>
							</Tab>
							<Tab Title="Kubernetes">
                <ol>
                  <li>Create a Telegraf configuration file <b>telegraf.yaml</b> in the same folder as @(ProjectName).csproj
                    <pre><code>## Default values.yaml for Telegraf
replicaCount: 1
image:
  repo: "telegraf"
  tag: "1.12-alpine"
  pullPolicy: IfNotPresent
podAnnotations: {}
imagePullSecrets: []
env:
  - name: HOSTNAME
    value: "telegraf-polling-service"
service:
  enabled: true
  type: ClusterIP
  annotations: {}
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Create only for the release namespace or cluster wide (Role vs ClusterRole)
  clusterWide: false
  # Rules for the created rule
  rules: []
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

## Exposed telegraf configuration
## For full list of possible values see `/docs/all-config-values.yaml` and `/docs/all-config-values.toml`
## ref: https://docs.influxdata.com/telegraf/v1.1/administration/configuration/
config:
  agent:
    interval: "10s"
    round_interval: true
    metric_batch_size: 1000
    metric_buffer_limit: 10000
    collection_jitter: "0s"
    flush_interval: "10s"
    flush_jitter: "0s"
    precision: ""
    debug: false
    quiet: false
    logfile: ""
    hostname: "$HOSTNAME"
    omit_hostname: false
  processors:
    - enum:
        mapping:
          field: "status"
          dest: "status_code"
          value_mappings:
            healthy: 1
            problem: 2
            critical: 3
  outputs:
    - wavefront:
        urls:
          - "http://&lt;HELM_PROVIDED_HOST_ADDRESS&gt;:&lt;HELM_PROVIDED_PORT_NUMBER&gt;"
        prefix: "my.steeltoe.app."
  inputs:
    - prometheus:
	      urls:
          - "http://&lt;IP_ADDRESS_FROM_LAST_STEP&gt;:&lt;PORT_FROM_LAST_STEP&gt;/actuators/prometheus"</code></pre>
                  </li>
                  <li>
                    Install the Telegraf chart with a supplied config
                    <code class="inline">helm install -f &lt;PATH_TO&gt;/telegraf.conf --name telegraf --namespace monitoring stable/telegraf</code>
                  </li>
                </ol>
							</Tab>
						</TabSet>
			</div>
    </div>
    <div class="row">
			<div class="col-12 getting-started-header bold">Finally <b>use Wavefront</b> to view the metrics and traces being fed in</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <ol>
          <li>Create a new dashboard using the json template
          <pre><code>{ TODO }</code></pre>

          </li>
          <li>Visit the dashboard to see all the data being logged</li>
          <li>Click one of the "Top 5 Routes" to see the tracing for that request</li>
        </ol>
      </div>
		</div>
	</TutorialSteps>
</Tutorial>

@code
{
	private string ServiceName = "wavefront";
	//private string InstanceName = "mywavefrontapp";
	private string ProjectName = "Wavefront_Observability";
}