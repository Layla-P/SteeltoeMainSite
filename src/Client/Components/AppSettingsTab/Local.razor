<Tab Title="Local">
	@if (string.IsNullOrEmpty(ServiceName))
	{
		<span>It's already set, continue to next step.</span>
	}
	else
	{
		<span>Update with the @ServiceName info</span>
		<pre><code class="json">{
...
@if (!string.IsNullOrEmpty(ParentSettingsParamName)) {
<text>  "@ParentSettingsParamName": {
    "@ChildSettingsParamName": {</text>
      if (!string.IsNullOrEmpty(ServiceServer))
      {<text>
      "server": "@ServiceServer",</text>
			}
			if (!string.IsNullOrEmpty(ServiceHost))
			{<text>
      "host": "@ServiceHost",</text>
			}
			if (!string.IsNullOrEmpty(ServicePort))
			{<text>
      "port": "@ServicePort",</text>
			}
			if (!string.IsNullOrEmpty(ServiceUsername))
			{<text>
      "username": "@ServiceUsername",</text>
			}
			if (!string.IsNullOrEmpty(ServicePassword))
			{<text>
      "password": "@ServicePassword",</text>
			}
			if (!string.IsNullOrEmpty(ServiceDatabase))
			{<text>
      "database": "@ServiceDatabase"</text>
			}
<text>
    }
  }</text>
}
@if (!string.IsNullOrEmpty(SpringApplicationName)) {
<text>  "spring": {
    "application": {
      "name": "@SpringApplicationName"
    }</text>
}
@if (!string.IsNullOrEmpty(SpringServerUri)){
<text>,
    "cloud": {
      "config": {
        "uri": "@SpringServerUri",
        "validateCertificates": false
      }
    }</text>
}
@if (!string.IsNullOrEmpty(SpringApplicationName)) {
<text>
  },</text>
}
@if(!string.IsNullOrEmpty(ZipkinEndpoint))
{<text>
  "management": {
    "tracing": {
      "alwaysSample": true,
      "useShortTraceIds ": true,
      "exporter": {
        "zipkin": {
          "endpoint": "@(ZipkinEndpoint)",
          "validateCertificates": false,
          "useShortTraceIds ": true
        }
      }
    }
  },</text>
}
@if(!string.IsNullOrEmpty(ManagementEndpointPath))
{<text>  "management": {
    "endpoints": {
      "path": "@ManagementEndpointPath",
      "cloudfoundry": {
        "validateCertificates": false
      }
    },
    "metrics": {
      "exporter": {
        "cloudfoundry": {
          "validateCertificates": false
        }
      }
    }
  }</text>
}
@if(!string.IsNullOrEmpty(ShouldRegisterWithEureka))
{<text>
  "eureka": {
    "client": {</text>
		if (!string.IsNullOrEmpty(EurekaServerUrl))
		{<text>
      "serviceUrl": "@EurekaServerUrl",</text>
		}
		if (!string.IsNullOrEmpty(ShouldFetchEurekaRegistry))
		{<text>
      "shouldFetchRegistry": "@ShouldFetchEurekaRegistry",</text>
		}<text>
      "shouldRegisterWithEureka": @ShouldRegisterWithEureka,
      "validateCertificates": false
    },
    "instance": {</text>
		if (!string.IsNullOrEmpty(EurekaAppPort))
		{<text>
      "port": "@EurekaAppPort",</text>
		}
		if (!string.IsNullOrEmpty(EurekaAppIP))
		{<text>
      "ipAddress": "@EurekaAppIP",</text>
		}
		if (!string.IsNullOrEmpty(EurekaAppIP))
		{<text>
      "preferIpAddress": true</text>
		}<text>
    }
  }</text>
}
@if(!string.IsNullOrEmpty(ConsulShouldRegister))
{<text>
  "consul": {
    "host": "@ConsulHostAddress",
    "port": @ConsulHostPort,
    "discovery": {
      "enabled": true,
      "register": @ConsulShouldRegister,</text>
		if (!string.IsNullOrEmpty(ConsolAppPort))
		{<text>
      "port": "@ConsolAppPort",</text>
		}
		if (!string.IsNullOrEmpty(ConsolAppIP))
		{<text>
      "ipAddress": "@ConsolAppIP",</text>
		}
		if (!string.IsNullOrEmpty(ConsolAppIP))
		{<text>
      "preferIpAddress": true</text>
	  }<text>
    }
  }</text>
}
@if(!string.IsNullOrEmpty(OAuthClient)){
<text>  "security": {
    "oauth2": {
      "client": {
        "validateCertificates": false,
      }
    }
  }</text>
}
@if(!string.IsNullOrEmpty(OpenIDClient)){
<text>	"security": {
		"oauth2": {
			"client": {
				"validateCertificates": false,
			@(string.IsNullOrEmpty(OpenIDAuthDomain) ? "" : "\"authDomain\": \"" + OpenIDAuthDomain + "\",")
			@(string.IsNullOrEmpty(OpenIDClientId) ? "" : "\"clientId\": \"" + OpenIDClientId + "\",")
			@(string.IsNullOrEmpty(OpenIDClientSecret) ? "" : "\"clientSecret\": \"" + OpenIDClientSecret + "\",")
			}
		}
	}</text>
}<text>
...
}</text></code></pre>
}
@ChildContent
</Tab>

@code {
	[Parameter]
	public string ServiceName { get; set; } = "";
	[Parameter]
	public string SpringApplicationName { get; set; } = null;
	[Parameter]
	public string SpringServerUri { get; set; } = null;
	[Parameter]
	public string ZipkinEndpoint { get; set; } = null;
	[Parameter]
	public string ManagementEndpointPath { get; set; } = null;
	[Parameter]
	public string ShouldRegisterWithEureka { get; set; } = null;
	[Parameter]
	public string ConsulHostAddress { get; set; } = null;
	[Parameter]
	public string ConsulHostPort { get; set; } = null;
	[Parameter]
	public string ConsulShouldRegister { get; set; } = null;
	[Parameter]
	public string ConsolAppPort { get; set; } = null;
	[Parameter]
	public string ConsolAppIP { get; set; } = null;
	[Parameter]
	public string ProjectName { get; set; } = "";
	[Parameter]
	public string ServiceServer { get; set; } = null;
	[Parameter]
	public string ServiceHost { get; set; } = null;
	[Parameter]
	public string ServicePort { get; set; } = null;
	[Parameter]
	public string ServiceUsername { get; set; } = null;
	[Parameter]
	public string ServicePassword { get; set; } = null;
	[Parameter]
	public string ServiceDatabase { get; set; } = null;
	[Parameter]
	public string ParentSettingsParamName { get; set; } = "";
	[Parameter]
	public string ChildSettingsParamName { get; set; } = null;
	[Parameter]
	public string EurekaServerUrl { get; set; } = null;
	[Parameter]
	public string EurekaAppPort { get; set; } = null;
	[Parameter]
	public string ShouldFetchEurekaRegistry { get; set; } = null;
	[Parameter]
	public string EurekaAppIP { get; set; } = null;
	[Parameter]
	public string OAuthClient { get; set; } = null;
	[Parameter]
	public string OpenIDClient { get; set; } = null;
	[Parameter]
	public string OpenIDAuthDomain { get; set; } = null;
	[Parameter]
	public string OpenIDClientId { get; set; } = null;
	[Parameter]
	public string OpenIDClientSecret { get; set; } = null;

	[Parameter]
	public RenderFragment ChildContent { get; set; }
}