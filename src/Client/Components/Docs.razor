@using System.Diagnostics
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@((MarkupString)Content)

@code {
	[Parameter]
	public string Component { get; set; }
	[Parameter]
	public string Area { get; set; }

	private string Content { get; set; }

	protected override void OnInitialized() {
		NavigationManager.LocationChanged += LocationChanged;
	}
	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (firstRender) {
			ParseUri();
			await UpdateContent();
			ScrollToAnchor(forceScroll: true);
		}
	}
	private async void LocationChanged(object sender, LocationChangedEventArgs e) {
		//string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
		//Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");

		string fragment = NavigationManager.ToAbsoluteUri(e.Location).Fragment;
		ParseUri();

		if (string.IsNullOrEmpty(fragment))
			await UpdateContent();

		ScrollToAnchor(fragment);
	}
	private async Task UpdateContent() {
		var filePath = "site-data/docs/" + Component + "/" + Area + ".html";

		var tmp = "";

		try {
			tmp = await Http.GetStringAsync(filePath);
		} catch (HttpRequestException http) {
			if (http.Message.Contains("404")) {
				filePath = "site-data/docs/introduction/overview.html";
				tmp = await Http.GetStringAsync(filePath);
			}
		} finally {
			Content = tmp;
			StateHasChanged();
		}
	}

	private void ScrollToAnchor(string anchor = "", bool forceScroll = false) {
		if (!string.IsNullOrEmpty(anchor) || forceScroll)
			JSRuntime.InvokeAsync<string>("scrollToAnchor", anchor);
	}
	private void Dispose() {
		NavigationManager.LocationChanged -= LocationChanged;
	}
	private void ParseUri() {
		var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		string[] segments = path.Split(Char.Parse("/"));

		if (segments.Length == 0)
			return; //nothing to see here

		if (segments.Length > 0 && string.IsNullOrEmpty(Component))
			Component = segments[0];

		if (segments.Length > 1 && string.IsNullOrEmpty(Area))
			Area = segments[1];
	}
}
