<Tab Title="Local">
	<ol>
    <li>
      Create <b>Dockerfile</b> in the same folder as @(ProjectName).csproj
<pre><code class="dockerfile">FROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build-env
WORKDIR /app

# Copy csproj and restore as distinct layers
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . ./
RUN dotnet publish -c Release -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1
WORKDIR /app
COPY --from=build-env /app/out .
ENTRYPOINT ["dotnet", "@(ProjectName).dll"]
</code></pre>
    </li>
		<li>Change into the folder that contains the project file (.csproj)
			<pre><code class="powershell">cd &lt;PATH_TO_CSPROJ_FOLDER&gt;</code></pre>
		</li>
		<li>Build the image using the Dockerfile and output of the publish
      <pre><code class="powershell">docker build -t @(ImageName) .</code></pre>
    </li>
		@*<Tip><Message>With the container image built, you can test locally by running <code>docker run -p 80:80 &lt;YOUR_DOCKER_NAME&gt;/@(ProjectName.ToLower())</code>. Then navigate to <a href="http://localhost:8080/api/values" target="_blank">http://localhost/api/values</a>.</Message></Tip>*@
		@if(IncludeCreateNetworkStep == true){
			<li>Create a docker network for all the containers to run within
				<pre><code class="powershell">docker network create "@NetworkName"</code></pre>
			</li>
		}
    <li>Run the image as a container
			<pre><code class="powershell">docker run --name "@ContainerName" @(!string.IsNullOrEmpty(NetworkName) ? "--network \""+NetworkName+"\"" : "") -d -p @ContainerPort:@PublicPort @ImageName</code></pre>
		</li>
	@AdditionalSteps
	</ol>
</Tab>

@code {
	[Parameter]
	public string ProjectName { get; set; }
	[Parameter]
	public string ImageName { get; set; }
	[Parameter]
	public string ContainerName { get; set; }
	[Parameter]
	public string ContainerPort { get; set; } = "8080";
	[Parameter]
	public string PublicPort { get; set; } = "8080";
	[Parameter]
	public bool IncludeCreateNetworkStep { get; set; } = false;
	[Parameter]
	public string NetworkName { get; set; } = null;

	[Parameter]
	public RenderFragment AdditionalSteps { get; set; }

	protected override void OnInitialized()
	{
		if(IncludeCreateNetworkStep == true)
			NetworkName = "steeltoe";

	 base.OnInitializedAsync();
	}
}